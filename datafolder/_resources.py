# -*- coding: utf-8 -*-

"""Make setup.py template and bootdf.py bootloader."""

import os


TPL_FILE = 'setup_TPL.py'
BOOT_FILE = 'bootdf.py'

TEMPLATE = r"""# -*- coding: utf-8 -*-
# setup.py template made by the 'datafolder' package


import sys
import pkg_resources

from setuptools import setup

from mypkg.bootdf import Installer, DataFolderException     # <-- ADAPT THIS

# write the name of the package (in this case 'mypkg'!)
MYPKG = 'mypkg'                                             # <-- ADAPT THIS

# mypkg supports these python versions
SUPPORT = ('2.6', '2.7', '3.1', '3.2', '3.3', '3.4')        # <-- ADAPT THIS

# list of data files in mypkg (just the names)
# [don't forget to include these files in MANIFEST.in!]
MYDATAFILES = ['mypkg.conf', 'mypkg.db']                    # <-- ADAPT THIS


# (many people get confused with the next step...)


# tell setup were these files are in your package
# (I assume that they are together with the first __init__.py)
MYRESOURCES = [pkg_resources.resource_filename(MYPKG, datafile)
               for datafile in MYDATAFILES]


# now, create the installer
installer = Installer(sys.argv)

# use the installer to check supported python versions
installer.support(SUPPORT)

# create the data folder and tell setup to put the data files there
try:
    DATAPATH = installer.data_path(MYPKG)
except DataFolderException:
    # here you can handle any exception raised with the creation
    # of the data folder, e.g., abort installation
    print('Abort installation!')
    raise
data_files = [(DATAPATH, MYRESOURCES)]

# now, setup can do his thing...
setup(
    name=MYPKG,
    packages=[MYPKG, "other_packg1", "other_packg2"],       # <-- ADAPT THIS
    data_files=data_files,
    install_requires=["datafolder>=0.0.9"],
    ...                                                     # <-- ADAPT THIS
)

# but we are NOT READY, in some cases the data files
# don't have the appropriate permissions,
# let's fix that...
installer.pos_setup(MYDATAFILES)
"""


BOOT = r"""# -*- coding: utf-8 -*-
# File generated by the 'datafolder' package


###         PUT THIS FILE INSIDE YOUR PROJECT

import os
import sys


__version__ = '0.0.9'


def in_virtual():
    return True if hasattr(sys, 'real_prefix') else False


class DataFolderException(Exception): 
    pass

class DataFolderNotMadeError(DataFolderException): 
    pass

class PythonNotSupportedError(DataFolderException): 
    pass


class Installer(object):
    def __init__(self, sysargv):
        self.ARGVS = sysargv
        self.FIRSTRUN = 'egg_info' in self.ARGVS
        self.PIP = '-c' in self.ARGVS
        self.INSTALL = any((m in self.ARGVS for m in ('install', 'develop')))\
            or self.PIP
        self.WINDOWS = os.name == 'nt'
        self.VIRTUAL = in_virtual()
        self.SECONDRUN = self.INSTALL and not self.FIRSTRUN
        self.CONFDIR = ''
        self.DATAPATH = ''
        self.PYSUPPORT = ()

    @staticmethod
    def _uxchown(fp):
        from pwd import getpwnam, getpwuid
        from grp import getgrnam, getgrgid
        uid = getpwnam(os.getenv("SUDO_USER",
                                 getpwuid(os.getuid()).pw_name)).pw_uid
        gid = getgrnam(os.getenv("SUDO_USER",
                                 getgrgid(os.getgid()).gr_name)).gr_gid
        os.chown(fp, uid, gid)

    def env(self):
        return {'FIRSTRUN': self.FIRSTRUN,
                'SECONDRUN': self.SECONDRUN,
                'INSTALL': self.INSTALL,
                'WINDOWS': self.WINDOWS,
                'VIRTUAL': self.VIRTUAL,
                'PYSUPPORT': self.PYSUPPORT,
                'DATAPATH': self.DATAPATH}

    def data_path(self, datadir):
        datadir = datadir.strip('. ')
        self.CONFDIR = '.' + datadir if not self.WINDOWS else datadir
        if self.VIRTUAL:
            virtualpath = sys.prefix
            installpath = os.path.join(virtualpath, datadir)
        else:
            user = '~%s' % os.getenv("SUDO_USER", '')
            homepath = os.path.expanduser(user)\
                if not self.WINDOWS else os.getenv('APPDATA')
            installpath = os.path.join(homepath, self.CONFDIR)
        if not os.path.isdir(installpath) and self.INSTALL:
            try:
                print('making data folder %s' % installpath)
                os.mkdir(installpath)
                self._uxchown(installpath)
            except:
                raise DataFolderNotMadeError('Abort: data folder NOT made!')
        self.DATAPATH = installpath
        return self.DATAPATH

    def pos_setup(self, datafiles):
        if not self.WINDOWS and self.SECONDRUN:
            for dat in datafiles:
                datp = os.path.join(self.DATAPATH, dat)
                if not os.path.isfile(datp):
                    print("Warning: file %s doesn't exist!" % datp)
                    continue
                try:
                    self._uxchown(datp)
                    print('changing mode of %s to 666' % dat)
                except:
                    print('Warning: permissions not set for file %s' % dat)

    def support(self, pys=None):
        if not pys:
            return True
        self.PYSUPPORT = pys
        py = sys.version[:3]
        if py not in self.PYSUPPORT:
            raise PythonNotSupportedError('Python %s is not supported!' % py)
        return True
"""

def mktpl():
    """Make template."""
    with open(TPL_FILE, 'w') as f:
        f.write(TEMPLATE)

def mkboot():
    """Make bootloader file."""
    with open(BOOT_FILE, 'w') as f:
        f.write(BOOT)
